@model Sozif.Orders

@{
    ViewData["Title"] = "Szczegóły zamówienia nr " + Model.OrderNumber;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Szczegóły zamówienia</h1>

<div>
    <h4>@Model.OrderNumber</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            Numer zamówienia
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.OrderNumber)
        </dd>
        <dt class="col-sm-2">
            Klient
        </dt>
        <dd class="col-sm-10">
            <a asp-action="Details" asp-controller="Customers" asp-route-id="@Model.CustomerId" asp-route-from="Order" asp-route-fromId="@Model.OrderId">@(Model.Customer.ToString())</a>
        </dd>
        <dt class="col-sm-2">
            Data zamówienia
        </dt>
        <dd class="col-sm-10">
            @(Model.OrderDate.ToString("dd.MM.yyyy", DateTimeFormatInfo.InvariantInfo))
        </dd>
        <dt class="col-sm-2">
            Adres realizacji
        </dt>
        <dd class="col-sm-10">
            @(Model.Address.FullAddress)
        </dd>
        <dt class="col-sm-2">
            Wartość netto
        </dt>
        <dd class="col-sm-10">
            @((Model.NetValue / 100.0).ToString("0.00")) zł
        </dd>
        <dt class="col-sm-2">
            Wartość VAT
        </dt>
        <dd class="col-sm-10">
            @((Model.TaxValue / 100.0).ToString("0.00")) zł
        </dd>
        <dt class="col-sm-2">
            Wartość brutto
        </dt>
        <dd class="col-sm-10">
            @((Model.GrossValue / 100.0).ToString("0.00")) zł
        </dd>
        <dt class="col-sm-2">
            Data realizacji
        </dt>
        @if (Model.RealisationDate != null)
        {
            <dd class="col-sm-10">
                @(Model.RealisationDate?.ToString("dd.MM.yyyy", DateTimeFormatInfo.InvariantInfo))
            </dd>
        }
        else
        {
            <dd class="col-sm-10">
                Niezrealizowane
            </dd>
        }
        @if (Model.Invoice != null)
        {
            <dt class="col-sm-2">
                Numer faktury
            </dt>
            <dd class="col-sm-10">
                <a asp-action="Details" asp-controller="Invoices" asp-route-id="@Model.Invoice.InvoiceId" asp-route-from="Order" asp-route-fromId="@Model.OrderId">@Model.Invoice.InvoiceNumber</a>
            </dd>
        }
        <dt class="col-sm-2">
            Osoba przyjmująca zamówienie
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.UserName)
        </dd>
    </dl>
</div>
<div>
    @if (Model.RealisationDate == null && Context.Session.GetString("EditOrders") == "true")
    {
        <a asp-action="Completed" asp-route-id="@Model.OrderId"><input class="btn btn-outline-success" type="button" value="Oznacz jako zrealizowane" /></a>
        <a asp-action="Edit" asp-route-id="@Model.OrderId"><input class="btn btn-outline-primary" type="button" value="Edytuj" /></a>
        <a asp-action="Delete" asp-route-id="@Model.OrderId"><input class="btn btn-outline-danger" type="button" value="Usuń" /></a>
    }
    else if (Model.RealisationDate != null && Context.Session.GetString("EditInvoices") == "true")
    {
        <a asp-action="FromOrder" asp-controller="Invoices" asp-route-orderId="@Model.OrderId" asp-route-customerId="@Model.CustomerId"><input class="btn btn-outline-success" type="button" value="Wystaw fakturę" /></a>
    }
    <a asp-action="Index"><input class="btn btn-secondary" type="button" value="Wróć do listy zamówień" /></a>
</div>
<hr />
<h4>Pozycje zamówienia</h4>
<table id="Positions" class="table table-bordered sortable">
    <thead>
        <tr>
            <th class="sorter-textPL" style="vertical-align: middle">
                Produkt
            </th>
            <th style="vertical-align: middle">
                Ilość
            </th>
            <th class="sorter-cur" style="vertical-align: middle">
                Cena netto
            </th>
            <th class="sorter-perc" style="vertical-align: middle">
                Rabat
            </th>
            <th class="sorter-cur" style="vertical-align: middle">
                Cena netto po rabacie
            </th>
            <th class="sorter-cur" style="vertical-align: middle">
                Suma netto
            </th>
            <th class="sorter-cur" style="vertical-align: middle">
                Suma VAT
            </th>
            <th class="sorter-cur" style="vertical-align: middle">
                Suma brutto
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.OrderPositions)
        {
            <tr onclick="location.href = '@(Url.Action("Details", "Products", new { id = item.ProductId, from = "Order", fromId = item.OrderId }))'">
                <td style="vertical-align: middle">
                    @item.Product.ProductName
                </td>
                <td style="vertical-align: middle">
                    @item.Count
                </td>
                <td style="vertical-align: middle">
                    @((item.Product.BaseNetPrice / 100.0).ToString("0.00")) zł
                </td>
                <td style="vertical-align: middle">
                    @if (item.Discount != null)
                    {
                        <text>@(item.Discount)%</text>
                    }
                </td>
                <td style="vertical-align: middle">
                    @((item.FinalNetPrice / 100.0).ToString("0.00")) zł
                </td>
                <td style="vertical-align: middle">
                    @((item.FinalNetValue / 100.0).ToString("0.00")) zł
                </td>
                <td style="vertical-align: middle">
                    @((item.FinalTaxValue / 100.0).ToString("0.00")) zł
                </td>
                <td style="vertical-align: middle">
                    @((item.FinalGrossValue / 100.0).ToString("0.00")) zł
                </td>
            </tr>
        }
    </tbody>
</table>

@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $.tablesorter.addParser({
                id: 'cur',
                is: function (s, table, cell, $cell) {
                    return false;
                },
                format: function (s, table, cell, $cell) {
                    return s.replace(' zł', '').replace(',', '');
                },
                type: 'number'
            });
            $.tablesorter.addParser({
                id: 'perc',
                is: function (s, table, cell, $cell) {
                    return false;
                },
                format: function (s, table, cell, $cell) {
                    return s.replace('%', '');
                },
                type: 'number'
            });
            $.tablesorter.addParser({
                id: 'textPL',
                is: function (s, table, cell, $cell) {
                    return false;
                },
                format: function (s, table, cell, $cell) {
                    return s.toLowerCase().replace('ą', 'a').replace('ć', 'c').replace('ę', 'e').replace('ł', 'l').replace('ó', 'o').replace('ś', 's').replace('ż', 'z').replace('ź', 'z');
                },
                type: 'text'
            });
            $("#Positions").tablesorter({
                theme: 'blue',
                widgets: ['zebra']
            });
        });
    </script>
}